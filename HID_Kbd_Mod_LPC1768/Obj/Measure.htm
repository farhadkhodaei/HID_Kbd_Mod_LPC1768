<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Obj\Measure.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Obj\Measure.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 76]: Last Updated: Mon Apr 30 23:37:10 2018
<BR><P>
<H3>Maximum Stack Usage =        304 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; usbh_engine &rArr; USBH_EnumerateDevice &rArr; USBH_GetDescriptor &rArr; USBH_Send_Data &rArr; usbh_transfer
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[c3]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[6]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">NMI_Handler</a><BR>
 <LI><a href="#[7]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">HardFault_Handler</a><BR>
 <LI><a href="#[8]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">MemManage_Handler</a><BR>
 <LI><a href="#[9]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">BusFault_Handler</a><BR>
 <LI><a href="#[a]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">UsageFault_Handler</a><BR>
 <LI><a href="#[b]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">SVC_Handler</a><BR>
 <LI><a href="#[c]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">DebugMon_Handler</a><BR>
 <LI><a href="#[d]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">PendSV_Handler</a><BR>
 <LI><a href="#[25]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25]">ADC_IRQHandler</a><BR>
 <LI><a href="#[6d]">_sys_exit</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6d]">_sys_exit</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[25]">ADC_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[26]">BOD_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[9]">BusFault_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[31]">CANActivity_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[28]">CAN_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[29]">DMA_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[c]">DebugMon_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[21]">EINT0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[22]">EINT1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[23]">EINT2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[24]">EINT3_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2b]">ENET_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[7]">HardFault_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[19]">I2C0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1a]">I2C1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1b]">I2C2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2a]">I2S_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2d]">MCPWM_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[8]">MemManage_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[6]">NMI_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1f]">PLL0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2f]">PLL1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[18]">PWM1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[d]">PendSV_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2e]">QEI_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2c]">RIT_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[20]">RTC_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[5]">Reset_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1c]">SPI_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1d]">SSP0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1e]">SSP1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[b]">SVC_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[e]">SysTick_Handler</a> from measure.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[32]">SystemInit</a> from system_lpc17xx.o(.text) referenced from startup_lpc17xx.o(.text)
 <LI><a href="#[10]">TIMER0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[11]">TIMER1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[12]">TIMER2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[13]">TIMER3_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[14]">UART0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[15]">UART1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[16]">UART2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[17]">UART3_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[30]">USBActivity_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[36]">USBH0_HID0_Callback</a> from usbh_hid.o(i.USBH0_HID0_Callback) referenced from usbh_hid.o(i.USBH_HID_Init)
 <LI><a href="#[37]">USBH0_HID1_Callback</a> from usbh_hid.o(i.USBH0_HID1_Callback) referenced from usbh_hid.o(i.USBH_HID_Init)
 <LI><a href="#[38]">USBH0_HID2_Callback</a> from usbh_hid.o(i.USBH0_HID2_Callback) referenced from usbh_hid.o(i.USBH_HID_Init)
 <LI><a href="#[39]">USBH0_HID3_Callback</a> from usbh_hid.o(i.USBH0_HID3_Callback) referenced from usbh_hid.o(i.USBH_HID_Init)
 <LI><a href="#[3a]">USBH1_HID0_Callback</a> from usbh_hid.o(i.USBH1_HID0_Callback) referenced from usbh_hid.o(i.USBH_HID_Init)
 <LI><a href="#[3b]">USBH1_HID1_Callback</a> from usbh_hid.o(i.USBH1_HID1_Callback) referenced from usbh_hid.o(i.USBH_HID_Init)
 <LI><a href="#[3c]">USBH1_HID2_Callback</a> from usbh_hid.o(i.USBH1_HID2_Callback) referenced from usbh_hid.o(i.USBH_HID_Init)
 <LI><a href="#[3d]">USBH1_HID3_Callback</a> from usbh_hid.o(i.USBH1_HID3_Callback) referenced from usbh_hid.o(i.USBH_HID_Init)
 <LI><a href="#[46]">USBH_HID_Config</a> from usbh_hid.o(i.USBH_HID_Config) referenced from usbh_hid.o(.data)
 <LI><a href="#[4a]">USBH_HID_GetLastError</a> from usbh_hid.o(i.USBH_HID_GetLastError) referenced from usbh_hid.o(.data)
 <LI><a href="#[48]">USBH_HID_Init</a> from usbh_hid.o(i.USBH_HID_Init) referenced from usbh_hid.o(.data)
 <LI><a href="#[47]">USBH_HID_UnConfig</a> from usbh_hid.o(i.USBH_HID_UnConfig) referenced from usbh_hid.o(.data)
 <LI><a href="#[49]">USBH_HID_UnInit</a> from usbh_hid.o(i.USBH_HID_UnInit) referenced from usbh_hid.o(.data)
 <LI><a href="#[4c]">USBH_OHCI_Delay_ms</a> from usbh_ohci.o(i.USBH_OHCI_Delay_ms) referenced from usbh_ohci.o(.data)
 <LI><a href="#[53]">USBH_OHCI_EP_Add</a> from usbh_ohci.o(i.USBH_OHCI_EP_Add) referenced from usbh_ohci.o(.data)
 <LI><a href="#[54]">USBH_OHCI_EP_Config</a> from usbh_ohci.o(i.USBH_OHCI_EP_Config) referenced from usbh_ohci.o(.data)
 <LI><a href="#[55]">USBH_OHCI_EP_Remove</a> from usbh_ohci.o(i.USBH_OHCI_EP_Remove) referenced from usbh_ohci.o(.data)
 <LI><a href="#[4b]">USBH_OHCI_Get_Capabilities</a> from usbh_ohci.o(i.USBH_OHCI_Get_Capabilities) referenced from usbh_ohci.o(.data)
 <LI><a href="#[51]">USBH_OHCI_Get_Connect</a> from usbh_ohci.o(i.USBH_OHCI_Get_Connect) referenced from usbh_ohci.o(.data)
 <LI><a href="#[52]">USBH_OHCI_Get_Speed</a> from usbh_ohci.o(i.USBH_OHCI_Get_Speed) referenced from usbh_ohci.o(.data)
 <LI><a href="#[4e]">USBH_OHCI_Init</a> from usbh_ohci.o(i.USBH_OHCI_Init) referenced from usbh_ohci.o(.data)
 <LI><a href="#[4d]">USBH_OHCI_Pins_Config</a> from usbh_ohci.o(i.USBH_OHCI_Pins_Config) referenced from usbh_ohci.o(.data)
 <LI><a href="#[4f]">USBH_OHCI_Port_Power</a> from usbh_ohci.o(i.USBH_OHCI_Port_Power) referenced from usbh_ohci.o(.data)
 <LI><a href="#[50]">USBH_OHCI_Port_Reset</a> from usbh_ohci.o(i.USBH_OHCI_Port_Reset) referenced from usbh_ohci.o(.data)
 <LI><a href="#[57]">USBH_OHCI_URB_Cancel</a> from usbh_ohci.o(i.USBH_OHCI_URB_Cancel) referenced from usbh_ohci.o(.data)
 <LI><a href="#[56]">USBH_OHCI_URB_Submit</a> from usbh_ohci.o(i.USBH_OHCI_URB_Submit) referenced from usbh_ohci.o(.data)
 <LI><a href="#[27]">USB_IRQHandler</a> from usbh_ohci_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[a]">UsageFault_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[f]">WDT_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[58]">__main</a> from __main.o(!!!main) referenced from startup_lpc17xx.o(.text)
 <LI><a href="#[35]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[34]">_sputc</a> from _sputc.o(.text) referenced from __2sprintf.o(.text)
 <LI><a href="#[3f]">usbh_ohci_hw_delay_ms</a> from usbh_ohci_lpc17xx.o(.text) referenced from usbh_ohci_lpc17xx.o(.data)
 <LI><a href="#[3e]">usbh_ohci_hw_get_capabilities</a> from usbh_ohci_lpc17xx.o(.text) referenced from usbh_ohci_lpc17xx.o(.data)
 <LI><a href="#[43]">usbh_ohci_hw_init</a> from usbh_ohci_lpc17xx.o(.text) referenced from usbh_ohci_lpc17xx.o(.data)
 <LI><a href="#[45]">usbh_ohci_hw_irq_en</a> from usbh_ohci_lpc17xx.o(.text) referenced from usbh_ohci_lpc17xx.o(.data)
 <LI><a href="#[42]">usbh_ohci_hw_pins_config</a> from usbh_ohci_lpc17xx.o(.text) referenced from usbh_ohci_lpc17xx.o(.data)
 <LI><a href="#[44]">usbh_ohci_hw_port_power</a> from usbh_ohci_lpc17xx.o(.text) referenced from usbh_ohci_lpc17xx.o(.data)
 <LI><a href="#[41]">usbh_ohci_hw_reg_rd</a> from usbh_ohci_lpc17xx.o(.text) referenced from usbh_ohci_lpc17xx.o(.data)
 <LI><a href="#[40]">usbh_ohci_hw_reg_wr</a> from usbh_ohci_lpc17xx.o(.text) referenced from usbh_ohci_lpc17xx.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[58]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[59]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[5b]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[f2]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[f3]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[5c]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[f4]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[5d]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[ba]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[5f]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[f5]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[66]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[f6]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[f7]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[61]"></a>__rt_lib_init_rand_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_rand_2 &rArr; _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[f8]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[f9]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[fa]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[fb]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[fc]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[fd]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[fe]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[ff]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[100]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[101]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[102]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[103]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[104]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[105]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[106]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[107]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))

<P><STRONG><a name="[108]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[109]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[6b]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[10a]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[10b]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[10c]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[10d]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[10e]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[10f]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[5a]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[110]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[63]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[65]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[111]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[67]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; usbh_engine &rArr; USBH_EnumerateDevice &rArr; USBH_GetDescriptor &rArr; USBH_Send_Data &rArr; usbh_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[112]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[c4]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[6a]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[113]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[6c]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[a7]"></a>wait</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hx8352.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_cmd
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayms
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_send
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_reg
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rd_dat
</UL>

<P><STRONG><a name="[84]"></a>rand</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, rand.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>CANActivity_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>CAN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EINT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EINT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>ENET_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>MCPWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>PLL0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>PLL1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>QEI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>RIT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>SPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>SSP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>SSP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USBActivity_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[c3]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_lpc17xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[6e]"></a>sendchar</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, retarget.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_ScrollVertical
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DisplayChar
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_ClearLn
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[72]"></a>getkey</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = getkey &rArr; usbh_hid_kbd_getkey &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_hid_kbd_getkey
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[74]"></a>fputc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendchar
</UL>

<P><STRONG><a name="[75]"></a>fgetc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_hid_kbd_getkey
</UL>

<P><STRONG><a name="[114]"></a>ferror</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED)

<P><STRONG><a name="[76]"></a>_ttywrch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendchar
</UL>

<P><STRONG><a name="[6d]"></a>_sys_exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, retarget.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[77]"></a>__2sprintf</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, __2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c1]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[115]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[116]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[117]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[118]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[c2]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[119]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[79]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, system_lpc17xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[32]"></a>SystemInit</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, system_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(.text)
</UL>
<P><STRONG><a name="[7c]"></a>delay_us</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, measure.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[7b]"></a>delay_ms</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, measure.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>

<P><STRONG><a name="[11a]"></a>ADC_Init</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, measure.o(.text), UNUSED)

<P><STRONG><a name="[7e]"></a>ADC_GetConversion</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, measure.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[e]"></a>SysTick_Handler</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, measure.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetConversion
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_current_measurements
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>main</STRONG> (Thumb, 342 bytes, Stack size 40 bytes, measure.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = main &rArr; usbh_engine &rArr; USBH_EnumerateDevice &rArr; USBH_GetDescriptor &rArr; USBH_Send_Data &rArr; usbh_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_hid_status
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_hid_data_out
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_engine
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_SendString
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getkey
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[3e]"></a>usbh_ohci_hw_get_capabilities</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usbh_ohci_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usbh_ohci_lpc17xx.o(.data)
</UL>
<P><STRONG><a name="[3f]"></a>usbh_ohci_hw_delay_ms</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usbh_ohci_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usbh_ohci_lpc17xx.o(.data)
</UL>
<P><STRONG><a name="[40]"></a>usbh_ohci_hw_reg_wr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbh_ohci_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usbh_ohci_lpc17xx.o(.data)
</UL>
<P><STRONG><a name="[41]"></a>usbh_ohci_hw_reg_rd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbh_ohci_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usbh_ohci_lpc17xx.o(.data)
</UL>
<P><STRONG><a name="[42]"></a>usbh_ohci_hw_pins_config</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, usbh_ohci_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usbh_ohci_lpc17xx.o(.data)
</UL>
<P><STRONG><a name="[43]"></a>usbh_ohci_hw_init</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, usbh_ohci_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = usbh_ohci_hw_init &rArr; usbh_mem_init &rArr; usbh_mem_init_lib &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_mem_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_ohci_lpc17xx.o(.data)
</UL>
<P><STRONG><a name="[44]"></a>usbh_ohci_hw_port_power</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbh_ohci_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usbh_ohci_lpc17xx.o(.data)
</UL>
<P><STRONG><a name="[45]"></a>usbh_ohci_hw_irq_en</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usbh_ohci_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usbh_ohci_lpc17xx.o(.data)
</UL>
<P><STRONG><a name="[27]"></a>USB_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbh_ohci_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USB_IRQHandler &rArr; USBH_OHCI_IRQHandler &rArr; USBH_OHCI_URB_Cancel &rArr; USBH_OHCI_TD_Dequeue &rArr; USBH_OHCI_TD_Clear
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OHCI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>GLCD_Init</STRONG> (Thumb, 1472 bytes, Stack size 24 bytes, glcd_spi_lpc1700.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rd_id_man
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_reg
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_cmd
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_tran
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>

<P><STRONG><a name="[93]"></a>GLCD_SetWindow</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, glcd_spi_lpc1700.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Bitmap
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Bargraph
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawChar
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_WindowMax
</UL>

<P><STRONG><a name="[94]"></a>GLCD_WindowMax</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, glcd_spi_lpc1700.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_SetWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Clear
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_ClearLn
</UL>

<P><STRONG><a name="[95]"></a>GLCD_PutPixel</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, glcd_spi_lpc1700.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_reg
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_cmd
</UL>

<P><STRONG><a name="[11b]"></a>GLCD_SetTextColor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, glcd_spi_lpc1700.o(.text), UNUSED)

<P><STRONG><a name="[11c]"></a>GLCD_SetBackColor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, glcd_spi_lpc1700.o(.text), UNUSED)

<P><STRONG><a name="[97]"></a>GLCD_Clear</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, glcd_spi_lpc1700.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_WindowMax
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_only
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_start
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_cmd
</UL>

<P><STRONG><a name="[9a]"></a>GLCD_DrawChar</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, glcd_spi_lpc1700.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_SetWindow
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_only
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_start
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DisplayChar
</UL>

<P><STRONG><a name="[6f]"></a>GLCD_DisplayChar</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, glcd_spi_lpc1700.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawChar
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DisplayString
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendchar
</UL>

<P><STRONG><a name="[9b]"></a>GLCD_DisplayString</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, glcd_spi_lpc1700.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DisplayChar
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_ClearLn
</UL>

<P><STRONG><a name="[71]"></a>GLCD_ClearLn</STRONG> (Thumb, 72 bytes, Stack size 72 bytes, glcd_spi_lpc1700.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DisplayString
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_WindowMax
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendchar
</UL>

<P><STRONG><a name="[9c]"></a>GLCD_Bargraph</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, glcd_spi_lpc1700.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_SetWindow
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_only
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_start
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_cmd
</UL>

<P><STRONG><a name="[9d]"></a>GLCD_Bitmap</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, glcd_spi_lpc1700.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_SetWindow
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_only
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_start
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_cmd
</UL>

<P><STRONG><a name="[70]"></a>GLCD_ScrollVertical</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, glcd_spi_lpc1700.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendchar
</UL>

<P><STRONG><a name="[9e]"></a>GLCD_WrCmd</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, glcd_spi_lpc1700.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_cmd
</UL>

<P><STRONG><a name="[9f]"></a>GLCD_WrReg</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, glcd_spi_lpc1700.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_reg
</UL>

<P><STRONG><a name="[7f]"></a>UART0_Init</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a0]"></a>UART0_SendByte</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_SendChar
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_SendString
</UL>

<P><STRONG><a name="[11d]"></a>UART0_GetChar</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[88]"></a>UART0_SendString</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = UART0_SendString
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11e]"></a>UART2_Init</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[a2]"></a>UART2_SendByte</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_SendChar
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_SendString
</UL>

<P><STRONG><a name="[11f]"></a>UART2_GetChar</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[a1]"></a>UART2_SendString</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_SendByte
</UL>

<P><STRONG><a name="[a3]"></a>UART0_SendChar</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_SendByte
</UL>

<P><STRONG><a name="[a4]"></a>UART2_SendChar</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_SendByte
</UL>

<P><STRONG><a name="[a5]"></a>wait_delay</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hx8352.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_delay
</UL>

<P><STRONG><a name="[a6]"></a>delayms</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, hx8352.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delayms
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[a8]"></a>wr_cmd</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, hx8352.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wr_cmd &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Show_Image
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PutPixel
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_reg
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>

<P><STRONG><a name="[ab]"></a>wr_dat_only</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, hx8352.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wr_dat_only &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Show_Image
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PutPixel
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>

<P><STRONG><a name="[80]"></a>LCD_Init</STRONG> (Thumb, 840 bytes, Stack size 16 bytes, hx8352.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LCD_Init &rArr; wr_reg &rArr; wr_cmd &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_cmd
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayms
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_reg
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rd_dat
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ad]"></a>LCD_SetCursor</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, hx8352.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LCD_SetCursor &rArr; wr_reg &rArr; wr_cmd &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PutPixel
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Window
</UL>

<P><STRONG><a name="[ae]"></a>LCD_Window</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, hx8352.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LCD_Window &rArr; LCD_SetCursor &rArr; wr_reg &rArr; wr_cmd &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Show_Image
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PutPixel
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WindowMax
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
</UL>

<P><STRONG><a name="[af]"></a>LCD_WindowMax</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hx8352.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LCD_WindowMax &rArr; LCD_Window &rArr; LCD_SetCursor &rArr; wr_reg &rArr; wr_cmd &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Window
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Show_Image
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>

<P><STRONG><a name="[b0]"></a>LCD_PutPixel</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, hx8352.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LCD_PutPixel &rArr; LCD_Window &rArr; LCD_SetCursor &rArr; wr_reg &rArr; wr_cmd &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Window
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_only
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Circle
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
</UL>

<P><STRONG><a name="[85]"></a>LCD_Clear</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, hx8352.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LCD_Clear &rArr; LCD_WindowMax &rArr; LCD_Window &rArr; LCD_SetCursor &rArr; wr_reg &rArr; wr_cmd &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WindowMax
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_only
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[86]"></a>LCD_Fill</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, hx8352.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = LCD_Fill &rArr; LCD_WindowMax &rArr; LCD_Window &rArr; LCD_SetCursor &rArr; wr_reg &rArr; wr_cmd &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WindowMax
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Window
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_only
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[120]"></a>LCD_SetTextColor</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hx8352.o(.text), UNUSED)

<P><STRONG><a name="[121]"></a>LCD_SetBackColor</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hx8352.o(.text), UNUSED)

<P><STRONG><a name="[b4]"></a>LCD_Pow</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hx8352.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowxNum
</UL>

<P><STRONG><a name="[b1]"></a>LCD_Show_Image</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, hx8352.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WindowMax
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Window
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_only
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_cmd
</UL>

<P><STRONG><a name="[b2]"></a>LCD_ShowChar</STRONG> (Thumb, 274 bytes, Stack size 56 bytes, hx8352.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LCD_ShowChar &rArr; LCD_PutPixel &rArr; LCD_Window &rArr; LCD_SetCursor &rArr; wr_reg &rArr; wr_cmd &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PutPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowxNum
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
</UL>

<P><STRONG><a name="[89]"></a>LCD_ShowString</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, hx8352.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LCD_ShowString &rArr; LCD_ShowChar &rArr; LCD_PutPixel &rArr; LCD_Window &rArr; LCD_SetCursor &rArr; wr_reg &rArr; wr_cmd &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b3]"></a>LCD_ShowxNum</STRONG> (Thumb, 132 bytes, Stack size 56 bytes, hx8352.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Pow
</UL>

<P><STRONG><a name="[b5]"></a>LCD_DrawLine</STRONG> (Thumb, 176 bytes, Stack size 48 bytes, hx8352.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PutPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRectangle
</UL>

<P><STRONG><a name="[b6]"></a>LCD_DrawRectangle</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, hx8352.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
</UL>

<P><STRONG><a name="[b7]"></a>Draw_Circle</STRONG> (Thumb, 196 bytes, Stack size 48 bytes, hx8352.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PutPixel
</UL>

<P><STRONG><a name="[7a]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[122]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[b8]"></a>__printf</STRONG> (Thumb, 390 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[bb]"></a>srand</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = srand
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[62]"></a>_rand_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_rand_2
</UL>

<P><STRONG><a name="[ee]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_hid_kbd_getkey
</UL>

<P><STRONG><a name="[db]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_hid_data_in_callback
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_ReportOut
</UL>

<P><STRONG><a name="[bc]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[123]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[e6]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OHCI_Init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OHCI_TD_Clear
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OHCI_IRQHandler
</UL>

<P><STRONG><a name="[be]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[124]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[d7]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OHCI_Init
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_UnConfig
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Config
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Send_Data
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_mem_init_lib
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Send_Setup
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Send_Data
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Rece_Data
</UL>

<P><STRONG><a name="[125]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[126]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[bf]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[78]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[34]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> __2sprintf.o(.text)
</UL>
<P><STRONG><a name="[c0]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[5e]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[60]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[bd]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[127]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[128]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[129]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[69]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[36]"></a>USBH0_HID0_Callback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbh_hid.o(i.USBH0_HID0_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBH0_HID0_Callback &rArr; USBH_HID_Callback &rArr; usbh_hid_data_in_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_hid.o(i.USBH_HID_Init)
</UL>
<P><STRONG><a name="[37]"></a>USBH0_HID1_Callback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbh_hid.o(i.USBH0_HID1_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBH0_HID1_Callback &rArr; USBH_HID_Callback &rArr; usbh_hid_data_in_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_hid.o(i.USBH_HID_Init)
</UL>
<P><STRONG><a name="[38]"></a>USBH0_HID2_Callback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbh_hid.o(i.USBH0_HID2_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBH0_HID2_Callback &rArr; USBH_HID_Callback &rArr; usbh_hid_data_in_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_hid.o(i.USBH_HID_Init)
</UL>
<P><STRONG><a name="[39]"></a>USBH0_HID3_Callback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbh_hid.o(i.USBH0_HID3_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBH0_HID3_Callback &rArr; USBH_HID_Callback &rArr; usbh_hid_data_in_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_hid.o(i.USBH_HID_Init)
</UL>
<P><STRONG><a name="[3a]"></a>USBH1_HID0_Callback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbh_hid.o(i.USBH1_HID0_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBH1_HID0_Callback &rArr; USBH_HID_Callback &rArr; usbh_hid_data_in_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_hid.o(i.USBH_HID_Init)
</UL>
<P><STRONG><a name="[3b]"></a>USBH1_HID1_Callback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbh_hid.o(i.USBH1_HID1_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBH1_HID1_Callback &rArr; USBH_HID_Callback &rArr; usbh_hid_data_in_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_hid.o(i.USBH_HID_Init)
</UL>
<P><STRONG><a name="[3c]"></a>USBH1_HID2_Callback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbh_hid.o(i.USBH1_HID2_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBH1_HID2_Callback &rArr; USBH_HID_Callback &rArr; usbh_hid_data_in_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_hid.o(i.USBH_HID_Init)
</UL>
<P><STRONG><a name="[3d]"></a>USBH1_HID3_Callback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbh_hid.o(i.USBH1_HID3_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBH1_HID3_Callback &rArr; USBH_HID_Callback &rArr; usbh_hid_data_in_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_hid.o(i.USBH_HID_Init)
</UL>
<P><STRONG><a name="[ca]"></a>USBH_EnumerateDevice</STRONG> (Thumb, 500 bytes, Stack size 72 bytes, usbh_core.o(i.USBH_EnumerateDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = USBH_EnumerateDevice &rArr; USBH_GetDescriptor &rArr; USBH_Send_Data &rArr; usbh_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_mem_free
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_mem_alloc
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SetConfiguration
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SetAddress
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetDescriptor
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SetLastError
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetClassDriverIdx
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_EP0_SetMaxPacketSize
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_EP0_SetAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_engine
</UL>

<P><STRONG><a name="[cc]"></a>USBH_GetDescriptor</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, usbh_core.o(i.USBH_GetDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = USBH_GetDescriptor &rArr; USBH_Send_Data &rArr; usbh_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_mem_free
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_mem_alloc
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Send_Setup
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Send_Data
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Rece_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_EnumerateDevice
</UL>

<P><STRONG><a name="[c5]"></a>USBH_HID_Callback</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, usbh_hid.o(i.USBH_HID_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBH_HID_Callback &rArr; usbh_hid_data_in_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_hid_data_in_callback
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_SetLastError
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_ReceOnIntIn
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH1_HID3_Callback
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH1_HID2_Callback
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH1_HID1_Callback
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH1_HID0_Callback
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH0_HID3_Callback
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH0_HID2_Callback
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH0_HID1_Callback
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH0_HID0_Callback
</UL>

<P><STRONG><a name="[46]"></a>USBH_HID_Config</STRONG> (Thumb, 350 bytes, Stack size 56 bytes, usbh_hid.o(i.USBH_HID_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USBH_HID_Config &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_SetLastError
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_hid.o(.data)
</UL>
<P><STRONG><a name="[48]"></a>USBH_HID_Init</STRONG> (Thumb, 272 bytes, Stack size 40 bytes, usbh_hid.o(i.USBH_HID_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = USBH_HID_Init &rArr; USBH_GetDescriptor &rArr; USBH_Send_Data &rArr; usbh_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_hid_parse_report_desc
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_SetLastError
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_SetIdle
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_ReceOnIntIn
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_mem_free
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_mem_alloc
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetDescriptor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_hid.o(.data)
</UL>
<P><STRONG><a name="[47]"></a>USBH_HID_UnConfig</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, usbh_hid.o(i.USBH_HID_UnConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBH_HID_UnConfig &rArr; usbh_mem_free &rArr; usbh_mem_free_lib
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_SetLastError
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_mem_free
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_hid.o(.data)
</UL>
<P><STRONG><a name="[49]"></a>USBH_HID_UnInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, usbh_hid.o(i.USBH_HID_UnInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_HID_UnInit
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_SetLastError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_hid.o(.data)
</UL>
<P><STRONG><a name="[4c]"></a>USBH_OHCI_Delay_ms</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbh_ohci.o(i.USBH_OHCI_Delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OHCI_Port_Reset
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OHCI_Get_Connect
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OHCI_ED_Stop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_ohci.o(.data)
</UL>
<P><STRONG><a name="[53]"></a>USBH_OHCI_EP_Add</STRONG> (Thumb, 314 bytes, Stack size 24 bytes, usbh_ohci.o(i.USBH_OHCI_EP_Add))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USBH_OHCI_EP_Add &rArr; USBH_OHCI_ED_IntFindSlot
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OHCI_ED_IntFindSlot
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OHCI_ED_GetLast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_ohci.o(.data)
</UL>
<P><STRONG><a name="[54]"></a>USBH_OHCI_EP_Config</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, usbh_ohci.o(i.USBH_OHCI_EP_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBH_OHCI_EP_Config &rArr; USBH_OHCI_ED_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OHCI_ED_Stop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_ohci.o(.data)
</UL>
<P><STRONG><a name="[55]"></a>USBH_OHCI_EP_Remove</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, usbh_ohci.o(i.USBH_OHCI_EP_Remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBH_OHCI_EP_Remove &rArr; USBH_OHCI_ED_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OHCI_TD_Clear
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OHCI_TDURB_FindTD
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OHCI_TDURB_Clear
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OHCI_ED_Stop
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OHCI_ED_Clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_ohci.o(.data)
</UL>
<P><STRONG><a name="[4b]"></a>USBH_OHCI_Get_Capabilities</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbh_ohci.o(i.USBH_OHCI_Get_Capabilities))
<BR>[Address Reference Count : 1]<UL><LI> usbh_ohci.o(.data)
</UL>
<P><STRONG><a name="[51]"></a>USBH_OHCI_Get_Connect</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, usbh_ohci.o(i.USBH_OHCI_Get_Connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBH_OHCI_Get_Connect
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OHCI_Delay_ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_ohci.o(.data)
</UL>
<P><STRONG><a name="[52]"></a>USBH_OHCI_Get_Speed</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbh_ohci.o(i.USBH_OHCI_Get_Speed))
<BR>[Address Reference Count : 1]<UL><LI> usbh_ohci.o(.data)
</UL>
<P><STRONG><a name="[8b]"></a>USBH_OHCI_IRQHandler</STRONG> (Thumb, 418 bytes, Stack size 40 bytes, usbh_ohci.o(i.USBH_OHCI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USBH_OHCI_IRQHandler &rArr; USBH_OHCI_URB_Cancel &rArr; USBH_OHCI_TD_Dequeue &rArr; USBH_OHCI_TD_Clear
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OHCI_URB_Cancel
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OHCI_TDURB_FindTD
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_IRQHandler
</UL>

<P><STRONG><a name="[4e]"></a>USBH_OHCI_Init</STRONG> (Thumb, 428 bytes, Stack size 16 bytes, usbh_ohci.o(i.USBH_OHCI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBH_OHCI_Init &rArr; USBH_OHCI_TD_Clear
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OHCI_TD_Clear
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OHCI_ED_Clear
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_ohci.o(.data)
</UL>
<P><STRONG><a name="[4d]"></a>USBH_OHCI_Pins_Config</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbh_ohci.o(i.USBH_OHCI_Pins_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_OHCI_Pins_Config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_ohci.o(.data)
</UL>
<P><STRONG><a name="[4f]"></a>USBH_OHCI_Port_Power</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, usbh_ohci.o(i.USBH_OHCI_Port_Power))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_OHCI_Port_Power
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_ohci.o(.data)
</UL>
<P><STRONG><a name="[50]"></a>USBH_OHCI_Port_Reset</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, usbh_ohci.o(i.USBH_OHCI_Port_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_OHCI_Port_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OHCI_Delay_ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_ohci.o(.data)
</UL>
<P><STRONG><a name="[57]"></a>USBH_OHCI_URB_Cancel</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, usbh_ohci.o(i.USBH_OHCI_URB_Cancel))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBH_OHCI_URB_Cancel &rArr; USBH_OHCI_TD_Dequeue &rArr; USBH_OHCI_TD_Clear
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OHCI_TD_Dequeue
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OHCI_TDURB_FindURB
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OHCI_TDURB_Clear
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OHCI_ED_Stop
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OHCI_ED_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OHCI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_ohci.o(.data)
</UL>
<P><STRONG><a name="[56]"></a>USBH_OHCI_URB_Submit</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, usbh_ohci.o(i.USBH_OHCI_URB_Submit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USBH_OHCI_URB_Submit &rArr; USBH_OHCI_TD_Enqueue
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OHCI_TD_Enqueue
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OHCI_TDURB_GetFree
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OHCI_ED_Start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_ohci.o(.data)
</UL>
<P><STRONG><a name="[d2]"></a>USBH_Rece_Data</STRONG> (Thumb, 196 bytes, Stack size 80 bytes, usbh_core.o(i.USBH_Rece_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USBH_Rece_Data &rArr; usbh_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_transfer
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SetLastError
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_SetReport
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_SetIdle
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SetConfiguration
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SetAddress
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetDescriptor
</UL>

<P><STRONG><a name="[d3]"></a>USBH_Send_Data</STRONG> (Thumb, 196 bytes, Stack size 80 bytes, usbh_core.o(i.USBH_Send_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USBH_Send_Data &rArr; usbh_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_transfer
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SetLastError
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_SetReport
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetDescriptor
</UL>

<P><STRONG><a name="[d1]"></a>USBH_Send_Setup</STRONG> (Thumb, 122 bytes, Stack size 64 bytes, usbh_core.o(i.USBH_Send_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USBH_Send_Setup &rArr; usbh_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_transfer
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SetLastError
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_SetReport
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_SetIdle
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SetConfiguration
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SetAddress
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetDescriptor
</UL>

<P><STRONG><a name="[ce]"></a>USBH_SetAddress</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, usbh_core.o(i.USBH_SetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = USBH_SetAddress &rArr; USBH_Rece_Data &rArr; usbh_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_mem_free
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_mem_alloc
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Send_Setup
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Rece_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_EnumerateDevice
</UL>

<P><STRONG><a name="[d0]"></a>USBH_SetConfiguration</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, usbh_core.o(i.USBH_SetConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = USBH_SetConfiguration &rArr; USBH_Rece_Data &rArr; usbh_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_mem_free
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_mem_alloc
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Send_Setup
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Rece_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_EnumerateDevice
</UL>

<P><STRONG><a name="[ec]"></a>USBH_UninitDevices</STRONG> (Thumb, 470 bytes, Stack size 48 bytes, usbh_core.o(i.USBH_UninitDevices))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBH_UninitDevices &rArr; USBH_GetClassDriverIdx
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetClassDriverIdx
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_engine
</UL>

<P><STRONG><a name="[b9]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[82]"></a>usbh_engine</STRONG> (Thumb, 324 bytes, Stack size 40 bytes, usbh_core.o(i.usbh_engine))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = usbh_engine &rArr; USBH_EnumerateDevice &rArr; USBH_GetDescriptor &rArr; USBH_Send_Data &rArr; usbh_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_UninitDevices
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_EnumerateDevice
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SetLastError
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetLastError
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d5]"></a>usbh_hid_data_in_callback</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, usbh_hid.o(i.usbh_hid_data_in_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usbh_hid_data_in_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_SetLastError
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Callback
</UL>

<P><STRONG><a name="[87]"></a>usbh_hid_data_out</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usbh_hid.o(i.usbh_hid_data_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = usbh_hid_data_out &rArr; USBH_HID_ReportOut &rArr; USBH_HID_SetReport &rArr; USBH_Send_Data &rArr; usbh_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_SetLastError
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_ReportOut
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[73]"></a>usbh_hid_kbd_getkey</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, usbh_hid.o(i.usbh_hid_kbd_getkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = usbh_hid_kbd_getkey &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_SetLastError
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getkey
</UL>

<P><STRONG><a name="[d9]"></a>usbh_hid_parse_report_desc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbh_hid.o(i.usbh_hid_parse_report_desc))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Init
</UL>

<P><STRONG><a name="[83]"></a>usbh_hid_status</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, usbh_hid.o(i.usbh_hid_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbh_hid_status
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_SetLastError
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[81]"></a>usbh_init</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, usbh_core.o(i.usbh_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = usbh_init &rArr; USBH_EP0_Setup
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SetLastError
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_EP0_Setup
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cb]"></a>usbh_mem_alloc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, usbh_core.o(i.usbh_mem_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usbh_mem_alloc &rArr; usbh_mem_alloc_lib
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_mem_alloc_lib
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SetLastError
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_SetReport
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_SetIdle
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_ReportOut
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SetConfiguration
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SetAddress
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetDescriptor
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_EnumerateDevice
</UL>

<P><STRONG><a name="[ef]"></a>usbh_mem_alloc_lib</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, usbh_mem.o(i.usbh_mem_alloc_lib))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbh_mem_alloc_lib
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_mem_alloc
</UL>

<P><STRONG><a name="[cd]"></a>usbh_mem_free</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usbh_core.o(i.usbh_mem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usbh_mem_free &rArr; usbh_mem_free_lib
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_mem_free_lib
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SetLastError
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_UnConfig
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_SetReport
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_SetIdle
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_ReportOut
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SetConfiguration
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SetAddress
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetDescriptor
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_EnumerateDevice
</UL>

<P><STRONG><a name="[f0]"></a>usbh_mem_free_lib</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, usbh_mem.o(i.usbh_mem_free_lib))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbh_mem_free_lib
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_mem_free
</UL>

<P><STRONG><a name="[8a]"></a>usbh_mem_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usbh_core.o(i.usbh_mem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = usbh_mem_init &rArr; usbh_mem_init_lib &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_mem_init_lib
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SetLastError
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_ohci_hw_init
</UL>

<P><STRONG><a name="[f1]"></a>usbh_mem_init_lib</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, usbh_mem.o(i.usbh_mem_init_lib))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = usbh_mem_init_lib &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_mem_init
</UL>

<P><STRONG><a name="[de]"></a>usbh_transfer</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, usbh_core.o(i.usbh_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = usbh_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SetLastError
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Send_Data
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Send_Setup
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Send_Data
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Rece_Data
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[7d]"></a>save_current_measurements</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, measure.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[8c]"></a>spi_tran_man</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, glcd_spi_lpc1700.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rd_id_man
</UL>

<P><STRONG><a name="[8d]"></a>delay</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, glcd_spi_lpc1700.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_tran_man
</UL>

<P><STRONG><a name="[91]"></a>spi_tran</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, glcd_spi_lpc1700.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_only
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_start
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_cmd
</UL>

<P><STRONG><a name="[90]"></a>wr_cmd</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, glcd_spi_lpc1700.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_tran
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_WrCmd
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Bitmap
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Bargraph
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawChar
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Clear
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_PutPixel
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Init
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_reg
</UL>

<P><STRONG><a name="[96]"></a>wr_dat</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, glcd_spi_lpc1700.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_tran
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_PutPixel
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_reg
</UL>

<P><STRONG><a name="[98]"></a>wr_dat_start</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, glcd_spi_lpc1700.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_tran
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Bitmap
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Bargraph
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawChar
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Clear
</UL>

<P><STRONG><a name="[99]"></a>wr_dat_only</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, glcd_spi_lpc1700.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_tran
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Bitmap
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Bargraph
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawChar
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Clear
</UL>

<P><STRONG><a name="[92]"></a>wr_reg</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, glcd_spi_lpc1700.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_WrReg
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_PutPixel
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_SetWindow
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_ScrollVertical
</UL>

<P><STRONG><a name="[8f]"></a>rd_id_man</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, glcd_spi_lpc1700.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_tran_man
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Init
</UL>

<P><STRONG><a name="[aa]"></a>rd_dat</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, hx8352.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rd_dat
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[ac]"></a>wr_reg</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, hx8352.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wr_reg &rArr; wr_cmd &rArr; lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_cmd
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Window
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[a9]"></a>lcd_send</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, hx8352.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lcd_send
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_only
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_cmd
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_reg
</UL>

<P><STRONG><a name="[c6]"></a>USBH_EP0_SetAddress</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, usbh_core.o(i.USBH_EP0_SetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_EP0_SetAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SetLastError
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_EnumerateDevice
</UL>

<P><STRONG><a name="[c8]"></a>USBH_EP0_SetMaxPacketSize</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, usbh_core.o(i.USBH_EP0_SetMaxPacketSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_EP0_SetMaxPacketSize
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SetLastError
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_EnumerateDevice
</UL>

<P><STRONG><a name="[c9]"></a>USBH_EP0_Setup</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, usbh_core.o(i.USBH_EP0_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_EP0_Setup
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SetLastError
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_init
</UL>

<P><STRONG><a name="[cf]"></a>USBH_GetClassDriverIdx</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, usbh_core.o(i.USBH_GetClassDriverIdx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_GetClassDriverIdx
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_UninitDevices
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_EnumerateDevice
</UL>

<P><STRONG><a name="[ed]"></a>USBH_GetLastError</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usbh_core.o(i.USBH_GetLastError))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_engine
</UL>

<P><STRONG><a name="[c7]"></a>USBH_SetLastError</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbh_core.o(i.USBH_SetLastError))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_transfer
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_mem_free
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_mem_alloc
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Send_Setup
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Send_Data
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Rece_Data
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_EnumerateDevice
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_EP0_Setup
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_EP0_SetMaxPacketSize
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_EP0_SetAddress
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_mem_init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_engine
</UL>

<P><STRONG><a name="[4a]"></a>USBH_HID_GetLastError</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, usbh_hid.o(i.USBH_HID_GetLastError))
<BR>[Address Reference Count : 1]<UL><LI> usbh_hid.o(.data)
</UL>
<P><STRONG><a name="[d6]"></a>USBH_HID_ReceOnIntIn</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, usbh_hid.o(i.USBH_HID_ReceOnIntIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_HID_ReceOnIntIn
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_SetLastError
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Callback
</UL>

<P><STRONG><a name="[da]"></a>USBH_HID_ReportOut</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, usbh_hid.o(i.USBH_HID_ReportOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = USBH_HID_ReportOut &rArr; USBH_HID_SetReport &rArr; USBH_Send_Data &rArr; usbh_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_SetReport
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_SetLastError
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Send_Data
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_mem_free
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_mem_alloc
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_hid_data_out
</UL>

<P><STRONG><a name="[dc]"></a>USBH_HID_Send_Data</STRONG> (Thumb, 180 bytes, Stack size 72 bytes, usbh_hid.o(i.USBH_HID_Send_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USBH_HID_Send_Data &rArr; usbh_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_SetLastError
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_transfer
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_ReportOut
</UL>

<P><STRONG><a name="[d8]"></a>USBH_HID_SetIdle</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, usbh_hid.o(i.USBH_HID_SetIdle))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = USBH_HID_SetIdle &rArr; USBH_Rece_Data &rArr; usbh_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_mem_free
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_mem_alloc
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Send_Setup
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Rece_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Init
</UL>

<P><STRONG><a name="[d4]"></a>USBH_HID_SetLastError</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usbh_hid.o(i.USBH_HID_SetLastError))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_hid_data_in_callback
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_UnInit
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_UnConfig
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Config
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Callback
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Send_Data
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_ReportOut
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_ReceOnIntIn
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_hid_status
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_hid_data_out
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_hid_kbd_getkey
</UL>

<P><STRONG><a name="[dd]"></a>USBH_HID_SetReport</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, usbh_hid.o(i.USBH_HID_SetReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = USBH_HID_SetReport &rArr; USBH_Send_Data &rArr; usbh_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_mem_free
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_mem_alloc
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Send_Setup
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Send_Data
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Rece_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_ReportOut
</UL>

<P><STRONG><a name="[e5]"></a>USBH_OHCI_ED_Clear</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usbh_ohci.o(i.USBH_OHCI_ED_Clear))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OHCI_Init
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OHCI_EP_Remove
</UL>

<P><STRONG><a name="[e0]"></a>USBH_OHCI_ED_GetLast</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usbh_ohci.o(i.USBH_OHCI_ED_GetLast))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OHCI_EP_Add
</UL>

<P><STRONG><a name="[e1]"></a>USBH_OHCI_ED_IntFindSlot</STRONG> (Thumb, 136 bytes, Stack size 36 bytes, usbh_ohci.o(i.USBH_OHCI_ED_IntFindSlot))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USBH_OHCI_ED_IntFindSlot
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OHCI_EP_Add
</UL>

<P><STRONG><a name="[e9]"></a>USBH_OHCI_ED_Start</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, usbh_ohci.o(i.USBH_OHCI_ED_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_OHCI_ED_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OHCI_URB_Submit
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OHCI_URB_Cancel
</UL>

<P><STRONG><a name="[df]"></a>USBH_OHCI_ED_Stop</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, usbh_ohci.o(i.USBH_OHCI_ED_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_OHCI_ED_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OHCI_Delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OHCI_URB_Cancel
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OHCI_EP_Remove
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OHCI_EP_Config
</UL>

<P><STRONG><a name="[e3]"></a>USBH_OHCI_TDURB_Clear</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbh_ohci.o(i.USBH_OHCI_TDURB_Clear))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OHCI_URB_Cancel
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OHCI_EP_Remove
</UL>

<P><STRONG><a name="[e2]"></a>USBH_OHCI_TDURB_FindTD</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, usbh_ohci.o(i.USBH_OHCI_TDURB_FindTD))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_OHCI_TDURB_FindTD
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OHCI_EP_Remove
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OHCI_IRQHandler
</UL>

<P><STRONG><a name="[e8]"></a>USBH_OHCI_TDURB_FindURB</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usbh_ohci.o(i.USBH_OHCI_TDURB_FindURB))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_OHCI_TDURB_FindURB
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OHCI_URB_Cancel
</UL>

<P><STRONG><a name="[eb]"></a>USBH_OHCI_TDURB_GetFree</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, usbh_ohci.o(i.USBH_OHCI_TDURB_GetFree))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OHCI_URB_Submit
</UL>

<P><STRONG><a name="[e4]"></a>USBH_OHCI_TD_Clear</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbh_ohci.o(i.USBH_OHCI_TD_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_OHCI_TD_Clear
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OHCI_Init
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OHCI_EP_Remove
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OHCI_TD_Dequeue
</UL>

<P><STRONG><a name="[e7]"></a>USBH_OHCI_TD_Dequeue</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, usbh_ohci.o(i.USBH_OHCI_TD_Dequeue))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBH_OHCI_TD_Dequeue &rArr; USBH_OHCI_TD_Clear
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OHCI_TD_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OHCI_URB_Cancel
</UL>

<P><STRONG><a name="[ea]"></a>USBH_OHCI_TD_Enqueue</STRONG> (Thumb, 178 bytes, Stack size 20 bytes, usbh_ohci.o(i.USBH_OHCI_TD_Enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USBH_OHCI_TD_Enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OHCI_URB_Submit
</UL>

<P><STRONG><a name="[35]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
